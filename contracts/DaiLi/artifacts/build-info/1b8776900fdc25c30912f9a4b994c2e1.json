{
	"id": "1b8776900fdc25c30912f9a4b994c2e1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/DaiLi/p.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// wtf.academy\r\npragma solidity ^0.8.4;\r\nimport  \"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\";\r\nimport  \"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\";"
			},
			"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol": {
				"Proxy": {
					"abi": [
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472\",\"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/DaiLi/p.sol": {
				"ast": {
					"absolutePath": "contracts/DaiLi/p.sol",
					"exportedSymbols": {
						"Proxy": [
							55
						]
					},
					"id": 4,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "49:23:0"
						},
						{
							"absolutePath": "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol",
							"file": "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4,
							"sourceUnit": 56,
							"src": "74:95:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol",
							"file": "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4,
							"sourceUnit": 56,
							"src": "171:95:0",
							"symbolAliases": [],
							"unitAlias": ""
						}
					],
					"src": "49:217:0"
				},
				"id": 0
			},
			"github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol": {
				"ast": {
					"absolutePath": "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol",
					"exportedSymbols": {
						"Proxy": [
							55
						]
					},
					"id": 56,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 5,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Proxy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "124:598:1",
								"text": " @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."
							},
							"fullyImplemented": false,
							"id": 55,
							"linearizedBaseContracts": [
								55
							],
							"name": "Proxy",
							"nameLocation": "741:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 13,
										"nodeType": "Block",
										"src": "1008:835:1",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1027:810:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1280:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1283:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nodeType": "YulIdentifier",
																			"src": "1286:12:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1286:14:1"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "1267:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1267:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1267:34:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1428:74:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nodeType": "YulIdentifier",
																			"src": "1455:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1455:5:1"
																	},
																	{
																		"name": "implementation",
																		"nodeType": "YulIdentifier",
																		"src": "1462:14:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1478:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nodeType": "YulIdentifier",
																			"src": "1481:12:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1481:14:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1497:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1500:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "delegatecall",
																	"nodeType": "YulIdentifier",
																	"src": "1442:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1442:60:1"
															},
															"variables": [
																{
																	"name": "result",
																	"nodeType": "YulTypedName",
																	"src": "1432:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1570:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "returndatasize",
																			"nodeType": "YulIdentifier",
																			"src": "1576:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1576:16:1"
																	}
																],
																"functionName": {
																	"name": "returndatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "1555:14:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1555:38:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1555:38:1"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1688:59:1",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1713:1:1",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"arguments": [],
																							"functionName": {
																								"name": "returndatasize",
																								"nodeType": "YulIdentifier",
																								"src": "1716:14:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1716:16:1"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nodeType": "YulIdentifier",
																						"src": "1706:6:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1706:27:1"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1706:27:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1681:66:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1686:1:1",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1768:59:1",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1793:1:1",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"arguments": [],
																							"functionName": {
																								"name": "returndatasize",
																								"nodeType": "YulIdentifier",
																								"src": "1796:14:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1796:16:1"
																						}
																					],
																					"functionName": {
																						"name": "return",
																						"nodeType": "YulIdentifier",
																						"src": "1786:6:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1786:27:1"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1786:27:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1760:67:1",
																	"value": "default"
																}
															],
															"expression": {
																"name": "result",
																"nodeType": "YulIdentifier",
																"src": "1614:6:1"
															},
															"nodeType": "YulSwitch",
															"src": "1607:220:1"
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 9,
														"isOffset": false,
														"isSlot": false,
														"src": "1462:14:1",
														"valueSize": 1
													}
												],
												"id": 12,
												"nodeType": "InlineAssembly",
												"src": "1018:819:1"
											}
										]
									},
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "753:190:1",
										"text": " @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."
									},
									"id": 14,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_delegate",
									"nameLocation": "957:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "975:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "967:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "966:24:1"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1008:0:1"
									},
									"scope": 55,
									"src": "948:895:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "1849:173:1",
										"text": " @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n and {_fallback} should delegate."
									},
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_implementation",
									"nameLocation": "2036:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:2:1"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "2085:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 17,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2085:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2084:9:1"
									},
									"scope": 55,
									"src": "2027:67:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 32,
										"nodeType": "Block",
										"src": "2360:72:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 24,
														"name": "_beforeFallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "2370:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2370:17:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 26,
												"nodeType": "ExpressionStatement",
												"src": "2370:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 28,
																"name": "_implementation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 20,
																"src": "2407:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 29,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2407:17:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 27,
														"name": "_delegate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "2397:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2397:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 31,
												"nodeType": "ExpressionStatement",
												"src": "2397:28:1"
											}
										]
									},
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "2100:217:1",
										"text": " @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."
									},
									"id": 33,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_fallback",
									"nameLocation": "2331:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2340:2:1"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2360:0:1"
									},
									"scope": 55,
									"src": "2322:110:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 40,
										"nodeType": "Block",
										"src": "2665:28:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 37,
														"name": "_fallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "2675:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2675:11:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 39,
												"nodeType": "ExpressionStatement",
												"src": "2675:11:1"
											}
										]
									},
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "2438:186:1",
										"text": " @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."
									},
									"id": 41,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2637:2:1"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2665:0:1"
									},
									"scope": 55,
									"src": "2629:64:1",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "2888:28:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 45,
														"name": "_fallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "2898:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:11:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "2898:11:1"
											}
										]
									},
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "2699:149:1",
										"text": " @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."
									},
									"id": 49,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2860:2:1"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2888:0:1"
									},
									"scope": 55,
									"src": "2853:63:1",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "3242:2:1",
										"statements": []
									},
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "2922:271:1",
										"text": " @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overridden should call `super._beforeFallback()`."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeFallback",
									"nameLocation": "3207:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3222:2:1"
									},
									"returnParameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3242:0:1"
									},
									"scope": 55,
									"src": "3198:46:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 56,
							"src": "723:2523:1",
							"usedErrors": []
						}
					],
					"src": "99:3148:1"
				},
				"id": 1
			}
		}
	}
}